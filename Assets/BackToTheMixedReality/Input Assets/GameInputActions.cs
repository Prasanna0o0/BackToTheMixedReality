//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/BackToTheMixedReality/Input Assets/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""GameAM"",
            ""id"": ""5b3186db-00f4-451e-8627-520756eec1b2"",
            ""actions"": [
                {
                    ""name"": ""SpawnObject"",
                    ""type"": ""Button"",
                    ""id"": ""3b00b42e-31a0-4a09-bcce-8b3726463952"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetCarTransform"",
                    ""type"": ""Button"",
                    ""id"": ""76913a35-28b2-47f8-bfd8-8b8faba3122c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfecffb1-5cc3-4c20-8b37-e3767ebc369e"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b865eddd-e17a-48b7-911c-72a7d7e47e10"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e52abf2-fd5a-4a74-a5a0-f6b6025fdb84"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6da2af26-df62-4d0d-aa71-4f7f7960166b"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetCarTransform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c1117bc-a1e9-4ed1-bb10-9c88440f1cff"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetCarTransform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Stopwatch"",
            ""id"": ""f45bbaeb-3356-4555-a09c-c58a1c17332e"",
            ""actions"": [
                {
                    ""name"": ""IncrementTime"",
                    ""type"": ""Button"",
                    ""id"": ""7350ac81-da73-4cd3-a8d8-2e58062ff18d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecrementTime"",
                    ""type"": ""Button"",
                    ""id"": ""b8cd7262-62fb-4872-afd8-b7a1e9302b62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleDestinationTimeSetup"",
                    ""type"": ""Button"",
                    ""id"": ""01f1a864-2a06-454a-8cfd-00f90fb4fec8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeBackgroundMusic"",
                    ""type"": ""Button"",
                    ""id"": ""b83b99e2-a0cd-4500-93b4-e71e7992d0bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e39bcca2-8dfa-4a59-b940-9599e58d4f4c"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncrementTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93fc5487-19fe-4665-a532-58f57277f989"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncrementTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05666e20-a2ee-405b-beec-f0407f330067"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecrementTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1b8ce20-1127-4a61-b28c-ed6fd5f81508"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecrementTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21888c48-8d49-4b1f-b52f-50917c661b45"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDestinationTimeSetup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb6540ca-6ce1-4a25-8801-a584f077fe62"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDestinationTimeSetup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ae810b8-c620-4cf4-8212-a4a6a63ada23"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDestinationTimeSetup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d727c904-02ad-462e-838c-74fffb654d6c"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBackgroundMusic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8011fc9-74f1-4369-a1ea-a5aa6fd763e3"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBackgroundMusic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LobbyTutorialAM"",
            ""id"": ""fa033576-3ab9-4133-a53d-93d37ec13ec3"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""7d236cdb-9bfc-4e16-8d56-3362c3db5888"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""869ddb86-b617-4a7a-bdae-f425084c29e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7acf2da-cc87-4d76-aedf-66cf6b328a06"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4814df66-a84f-4ccd-a317-de708cc21a34"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameAM
        m_GameAM = asset.FindActionMap("GameAM", throwIfNotFound: true);
        m_GameAM_SpawnObject = m_GameAM.FindAction("SpawnObject", throwIfNotFound: true);
        m_GameAM_ResetCarTransform = m_GameAM.FindAction("ResetCarTransform", throwIfNotFound: true);
        // Stopwatch
        m_Stopwatch = asset.FindActionMap("Stopwatch", throwIfNotFound: true);
        m_Stopwatch_IncrementTime = m_Stopwatch.FindAction("IncrementTime", throwIfNotFound: true);
        m_Stopwatch_DecrementTime = m_Stopwatch.FindAction("DecrementTime", throwIfNotFound: true);
        m_Stopwatch_ToggleDestinationTimeSetup = m_Stopwatch.FindAction("ToggleDestinationTimeSetup", throwIfNotFound: true);
        m_Stopwatch_ChangeBackgroundMusic = m_Stopwatch.FindAction("ChangeBackgroundMusic", throwIfNotFound: true);
        // LobbyTutorialAM
        m_LobbyTutorialAM = asset.FindActionMap("LobbyTutorialAM", throwIfNotFound: true);
        m_LobbyTutorialAM_LeftTrigger = m_LobbyTutorialAM.FindAction("LeftTrigger", throwIfNotFound: true);
        m_LobbyTutorialAM_RightTrigger = m_LobbyTutorialAM.FindAction("RightTrigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameAM
    private readonly InputActionMap m_GameAM;
    private List<IGameAMActions> m_GameAMActionsCallbackInterfaces = new List<IGameAMActions>();
    private readonly InputAction m_GameAM_SpawnObject;
    private readonly InputAction m_GameAM_ResetCarTransform;
    public struct GameAMActions
    {
        private @GameInputActions m_Wrapper;
        public GameAMActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnObject => m_Wrapper.m_GameAM_SpawnObject;
        public InputAction @ResetCarTransform => m_Wrapper.m_GameAM_ResetCarTransform;
        public InputActionMap Get() { return m_Wrapper.m_GameAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameAMActions set) { return set.Get(); }
        public void AddCallbacks(IGameAMActions instance)
        {
            if (instance == null || m_Wrapper.m_GameAMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameAMActionsCallbackInterfaces.Add(instance);
            @SpawnObject.started += instance.OnSpawnObject;
            @SpawnObject.performed += instance.OnSpawnObject;
            @SpawnObject.canceled += instance.OnSpawnObject;
            @ResetCarTransform.started += instance.OnResetCarTransform;
            @ResetCarTransform.performed += instance.OnResetCarTransform;
            @ResetCarTransform.canceled += instance.OnResetCarTransform;
        }

        private void UnregisterCallbacks(IGameAMActions instance)
        {
            @SpawnObject.started -= instance.OnSpawnObject;
            @SpawnObject.performed -= instance.OnSpawnObject;
            @SpawnObject.canceled -= instance.OnSpawnObject;
            @ResetCarTransform.started -= instance.OnResetCarTransform;
            @ResetCarTransform.performed -= instance.OnResetCarTransform;
            @ResetCarTransform.canceled -= instance.OnResetCarTransform;
        }

        public void RemoveCallbacks(IGameAMActions instance)
        {
            if (m_Wrapper.m_GameAMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameAMActions instance)
        {
            foreach (var item in m_Wrapper.m_GameAMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameAMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameAMActions @GameAM => new GameAMActions(this);

    // Stopwatch
    private readonly InputActionMap m_Stopwatch;
    private List<IStopwatchActions> m_StopwatchActionsCallbackInterfaces = new List<IStopwatchActions>();
    private readonly InputAction m_Stopwatch_IncrementTime;
    private readonly InputAction m_Stopwatch_DecrementTime;
    private readonly InputAction m_Stopwatch_ToggleDestinationTimeSetup;
    private readonly InputAction m_Stopwatch_ChangeBackgroundMusic;
    public struct StopwatchActions
    {
        private @GameInputActions m_Wrapper;
        public StopwatchActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @IncrementTime => m_Wrapper.m_Stopwatch_IncrementTime;
        public InputAction @DecrementTime => m_Wrapper.m_Stopwatch_DecrementTime;
        public InputAction @ToggleDestinationTimeSetup => m_Wrapper.m_Stopwatch_ToggleDestinationTimeSetup;
        public InputAction @ChangeBackgroundMusic => m_Wrapper.m_Stopwatch_ChangeBackgroundMusic;
        public InputActionMap Get() { return m_Wrapper.m_Stopwatch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StopwatchActions set) { return set.Get(); }
        public void AddCallbacks(IStopwatchActions instance)
        {
            if (instance == null || m_Wrapper.m_StopwatchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StopwatchActionsCallbackInterfaces.Add(instance);
            @IncrementTime.started += instance.OnIncrementTime;
            @IncrementTime.performed += instance.OnIncrementTime;
            @IncrementTime.canceled += instance.OnIncrementTime;
            @DecrementTime.started += instance.OnDecrementTime;
            @DecrementTime.performed += instance.OnDecrementTime;
            @DecrementTime.canceled += instance.OnDecrementTime;
            @ToggleDestinationTimeSetup.started += instance.OnToggleDestinationTimeSetup;
            @ToggleDestinationTimeSetup.performed += instance.OnToggleDestinationTimeSetup;
            @ToggleDestinationTimeSetup.canceled += instance.OnToggleDestinationTimeSetup;
            @ChangeBackgroundMusic.started += instance.OnChangeBackgroundMusic;
            @ChangeBackgroundMusic.performed += instance.OnChangeBackgroundMusic;
            @ChangeBackgroundMusic.canceled += instance.OnChangeBackgroundMusic;
        }

        private void UnregisterCallbacks(IStopwatchActions instance)
        {
            @IncrementTime.started -= instance.OnIncrementTime;
            @IncrementTime.performed -= instance.OnIncrementTime;
            @IncrementTime.canceled -= instance.OnIncrementTime;
            @DecrementTime.started -= instance.OnDecrementTime;
            @DecrementTime.performed -= instance.OnDecrementTime;
            @DecrementTime.canceled -= instance.OnDecrementTime;
            @ToggleDestinationTimeSetup.started -= instance.OnToggleDestinationTimeSetup;
            @ToggleDestinationTimeSetup.performed -= instance.OnToggleDestinationTimeSetup;
            @ToggleDestinationTimeSetup.canceled -= instance.OnToggleDestinationTimeSetup;
            @ChangeBackgroundMusic.started -= instance.OnChangeBackgroundMusic;
            @ChangeBackgroundMusic.performed -= instance.OnChangeBackgroundMusic;
            @ChangeBackgroundMusic.canceled -= instance.OnChangeBackgroundMusic;
        }

        public void RemoveCallbacks(IStopwatchActions instance)
        {
            if (m_Wrapper.m_StopwatchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStopwatchActions instance)
        {
            foreach (var item in m_Wrapper.m_StopwatchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StopwatchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StopwatchActions @Stopwatch => new StopwatchActions(this);

    // LobbyTutorialAM
    private readonly InputActionMap m_LobbyTutorialAM;
    private List<ILobbyTutorialAMActions> m_LobbyTutorialAMActionsCallbackInterfaces = new List<ILobbyTutorialAMActions>();
    private readonly InputAction m_LobbyTutorialAM_LeftTrigger;
    private readonly InputAction m_LobbyTutorialAM_RightTrigger;
    public struct LobbyTutorialAMActions
    {
        private @GameInputActions m_Wrapper;
        public LobbyTutorialAMActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTrigger => m_Wrapper.m_LobbyTutorialAM_LeftTrigger;
        public InputAction @RightTrigger => m_Wrapper.m_LobbyTutorialAM_RightTrigger;
        public InputActionMap Get() { return m_Wrapper.m_LobbyTutorialAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LobbyTutorialAMActions set) { return set.Get(); }
        public void AddCallbacks(ILobbyTutorialAMActions instance)
        {
            if (instance == null || m_Wrapper.m_LobbyTutorialAMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LobbyTutorialAMActionsCallbackInterfaces.Add(instance);
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
        }

        private void UnregisterCallbacks(ILobbyTutorialAMActions instance)
        {
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
        }

        public void RemoveCallbacks(ILobbyTutorialAMActions instance)
        {
            if (m_Wrapper.m_LobbyTutorialAMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILobbyTutorialAMActions instance)
        {
            foreach (var item in m_Wrapper.m_LobbyTutorialAMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LobbyTutorialAMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LobbyTutorialAMActions @LobbyTutorialAM => new LobbyTutorialAMActions(this);
    public interface IGameAMActions
    {
        void OnSpawnObject(InputAction.CallbackContext context);
        void OnResetCarTransform(InputAction.CallbackContext context);
    }
    public interface IStopwatchActions
    {
        void OnIncrementTime(InputAction.CallbackContext context);
        void OnDecrementTime(InputAction.CallbackContext context);
        void OnToggleDestinationTimeSetup(InputAction.CallbackContext context);
        void OnChangeBackgroundMusic(InputAction.CallbackContext context);
    }
    public interface ILobbyTutorialAMActions
    {
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
    }
}
